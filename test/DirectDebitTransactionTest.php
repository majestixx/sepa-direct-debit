<?php

use DirectDebit\Classes\DirectDebit;
use DirectDebit\Classes\DirectDebitTransaction;
use DirectDebit\Classes\Validator;
use LibBankaccount\Configuration;

require_once (__DIR__ . "/../vendor/autoload.php");

/**
 * Test class for Transaction.
 * Generated by PHPUnit on 2015-03-11 at 21:10:56.
 */
class DirectDebitTransactionTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var DirectDebitTransaction
   */
  protected $object;

  /**
   * @var DirectDebit
   */
  protected $dd;

  /**
   * @var \LibBankaccount\Configuration
   */
  protected $configuration;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->configuration = new Configuration("localhost","root","","sepa");
    $this->dd = DirectDebit::createDirectDebit($this->configuration, 'DE00ZZZ00099999999', 'Initiator Name',
          'DE87200500001234567890', 'BANKDEFFXXX', '2025-12-03', 'FRST', 'CORE',
          'Original Creditor Name', 'AA00ZZZOriginalCreditorID');
    $this->object = new DirectDebitTransaction($this->configuration, $this->dd, DirectDebitTransaction::generateEndToEndId(1) ,
          'Mandate-Id', '2010-11-20', 'Debtor Name', 'DE21500500009876543210',
          'SPUEDE2UXXX', 6543.14, 'EUR', 'Unstructured Remittance Information');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  public function TestGenerateEndToEndId()
  {
    $this->assertTrue(Validator::restrictedIdentificationSEPA1(
      DirectDebitTransaction::generateEndToEndId(1)));
  }

  public function testGetAmdmntInd()
  {
    /*
     * Es gibt 4 Möglichkeiten was sich geändert haben könnte:
     * 1. MandatID: OrgnlMdntID enthält das alte Mandat
     * 2. Name / ID des Zahlungsempfängers: OrgnlCdtrSchmeId muss gefüllt werden
     * 3. Debitor hat neues Konto bei der gleichen Bank: OrgnlDbtrAcct
     * 4. Konto des Debitors (neue Bank): OrgnlDbtrAgt enthält SMNDA --> FRST
     */
    $this->dd->setOrgnlCdtrSchmeId(null);
    $this->dd->setOrgnlCdtrSchmeName(null);
    $this->object->setDirectDebit($this->dd);

    $this->assertFalse($this->object->getAmdmntInd());

    // 1. MandatID: OrgnlMdntID enthält das alte Mandat
    $this->object->orgnlMandateId = 'OldMandate';
    $this->assertTrue($this->object->getAmdmntInd());
    $this->object->orgnlMandateId = null;

    // 2. Name / ID des Zahlungsempfängers: OrgnlCdtrSchmeId muss gefüllt werden
    $this->dd->setOrgnlCdtrSchmeName('Original Creditor Name');
    $this->object->setDirectDebit($this->dd);
    $this->assertTrue($this->object->getAmdmntInd());
    $this->dd->setOrgnlCdtrSchmeName(null);
    $this->object->setDirectDebit($this->dd);

    $this->dd->setOrgnlCdtrSchmeId('AA00ZZZOriginalCreditorID');
    $this->object->setDirectDebit($this->dd);
    $this->assertTrue($this->object->getAmdmntInd());
    $this->dd->setOrgnlCdtrSchmeId(null);
    $this->object->setDirectDebit($this->dd);

    // 3. Debitor hat neues Konto bei der gleichen Bank: OrgnlDbtrAcct
    $this->object->orgnlDbtrAcct = 'AA00ZZZOriginalCreditorID';
    $this->assertTrue($this->object->getAmdmntInd());
    $this->object->orgnlDbtrAcct = NULL;

    // 4. Konto des Debitors (neue Bank): OrgnlDbtrAgt enthält SMNDA --> FRST
    $this->object->debitorBankChanged = true;
    $this->assertTrue($this->object->getAmdmntInd());
    $this->object->debitorBankChanged = false;

    // Check that all values are set back correctly
    $this->assertFalse($this->object->getAmdmntInd());

  }

  public function testCsvfile2Transactions() {
    $file = fopen(__DIR__ . "/data/transactions.csv", "r");
    $delimiter = ";";
    $dD = DirectDebit::createDirectDebit($this->configuration, 'DE00ZZZ00099999999', 'Initiator Name',
      'DE87200500001234567890', 'BANKDEFFXXX', '2025-12-03', 'FRST', 'CORE',
      'Original Creditor Name', 'AA00ZZZOriginalCreditorID');

    $transactions =
      DirectDebitTransaction::csvfile2Transactions($file, $delimiter, $dD, $this->configuration);

    $this->assertEquals('Mandate-Id', $transactions[0]->mandateId);
    $this->assertEquals('2010-11-20', $transactions[0]->mandateDate);
    $this->assertEquals('Vorname Nachname', $transactions[0]->name);
    $this->assertEquals('DE51400501500000371815', $transactions[0]->iban);
    $this->assertEquals('SPUEDE2UXXX', $transactions[0]->bic);
    $this->assertEquals(6543.14, $transactions[0]->amount);
    $this->assertEquals('Verwendungszweck', $transactions[0]->message);
    $this->assertEquals('AltesMandat', $transactions[0]->orgnlMandateId);
    $this->assertEquals('DE02700205000007808005', $transactions[0]->orgnlDbtrAcct);

    $this->assertEquals('Mandate-Id2', $transactions[1]->mandateId);
    $this->assertEquals('2015-01-01', $transactions[1]->mandateDate);
    $this->assertEquals('Max Mustermann', $transactions[1]->name);
    $this->assertEquals('DE51400501500000371815', $transactions[1]->iban);
    $this->assertEquals('MLPBDE61', $transactions[1]->bic);
    $this->assertEquals(25.31, $transactions[1]->amount);
    $this->assertEquals('Verwendungszweck2', $transactions[1]->message);
    $this->assertEquals(null, $transactions[1]->orgnlMandateId);
    $this->assertEquals('', $transactions[1]->orgnlDbtrAcct);
  }
}
