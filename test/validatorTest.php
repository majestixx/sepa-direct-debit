<?php

use DirectDebit\Classes\Validator;
use LibBankaccount\Configuration;

require_once (__DIR__ . "/../vendor/autoload.php");


/**
 * Test class for Validator.
 * Generated by PHPUnit on 2015-03-05 at 08:35:52.
 */
class ValidatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Validator
     */
    protected $object;

  /**
   * @var Configuration
   */
    protected $configuration;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
      $this->object = new Validator();
      $this->configuration = new Configuration("localhost","root","","sepa");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAnyBICIdentifier()
    {
        $this->assertTrue($this->object->anyBICIdentifier('MLPBDE61'));
        $this->assertTrue($this->object->anyBICIdentifier('MLPBDE61XXX'));

        $this->assertFalse($this->object->anyBICIdentifier('ML1BDE61'));
        $this->assertFalse($this->object->anyBICIdentifier('MLPBDE11'));
        $this->assertFalse($this->object->anyBICIdentifier('MLPBDE61XX'));
        $this->assertFalse($this->object->anyBICIdentifier('mlbde61XX'));
        $this->assertFalse($this->object->anyBICIdentifier('aMLPBDE61XXX'));
        $this->assertFalse($this->object->anyBICIdentifier('MLPBDE61XXXb'));
    }

    public function testBicIdentifier()
    {
    	$this->assertTrue($this->object->anyBICIdentifier('MLPBDE61'));
    	$this->assertTrue($this->object->anyBICIdentifier('MLPBDE61XXX'));

    	$this->assertFalse($this->object->anyBICIdentifier('ML1BDE61'));
    	$this->assertFalse($this->object->anyBICIdentifier('MLPBDE11'));
    	$this->assertFalse($this->object->anyBICIdentifier('MLPBDE61XX'));
    	$this->assertFalse($this->object->anyBICIdentifier('mlbde61XX'));
    	$this->assertFalse($this->object->anyBICIdentifier('aMLPBDE61XXX'));
    	$this->assertFalse($this->object->anyBICIdentifier('MLPBDE61XXXb'));
    }

    public function testCountryCode()
    {
      $this->assertTrue($this->object->countryCode("DE"));
      $this->assertTrue($this->object->countryCode("EN"));

      $this->assertFalse($this->object->countryCode("de"));
      $this->assertFalse($this->object->countryCode("d1"));
      $this->assertFalse($this->object->countryCode("DEE"));
      $this->assertFalse($this->object->countryCode("E"));
    }

    public function testActiveOrHistoricCurrencyCode()
    {
			$this->assertTrue($this->object->activeOrHistoricCurrencyCode("EUR"));

			$this->assertFalse($this->object->activeOrHistoricCurrencyCode("eur"));
			$this->assertFalse($this->object->activeOrHistoricCurrencyCode("E1R"));
			$this->assertFalse($this->object->activeOrHistoricCurrencyCode("EU"));
			$this->assertFalse($this->object->activeOrHistoricCurrencyCode("EURO"));
    }

    public function testActiveOrHistoricCurrencyCodeEUR()
    {
    	$this->assertTrue($this->object->activeOrHistoricCurrencyCodeEUR("EUR"));

    	$this->assertFalse($this->object->activeOrHistoricCurrencyCodeEUR("NOK"));
    	$this->assertFalse($this->object->activeOrHistoricCurrencyCodeEUR("eur"));
    	$this->assertFalse($this->object->activeOrHistoricCurrencyCodeEUR("EURO"));
    }

    public function testDecimalTime()
    {
    	$this->assertTrue($this->object->decimalTime("123456789"));
    	$this->assertTrue($this->object->decimalTime("234567890"));

    	$this->assertFalse($this->object->decimalTime("12345678"));
    	$this->assertFalse($this->object->decimalTime("1234567890"));
    	$this->assertFalse($this->object->decimalTime("1234567a8"));
    }

    public function testIBAN2007Identifier()
    {
			$this->assertTrue($this->object->iBAN2007Identifier("DE87200500001234567890", $this->configuration));

			$this->assertFalse($this->object->iBAN2007Identifier("DEa7200500001234567890", $this->configuration));
			$this->assertFalse($this->object->iBAN2007Identifier("D187200500001234567890", $this->configuration));
			$this->assertFalse($this->object->iBAN2007Identifier("de87200500001234567890", $this->configuration));
			$this->assertFalse($this->object->iBAN2007Identifier("DE872005000012345678900000000000000", $this->configuration));
    }

    public function testText() {
    	$this->assertTrue($this->object->text("öÖüÜäÄ/ &*$+?%"));

    	$this->assertFalse($this->object->text("§²"));
    }

    public function testMax1025Text()
    {
			$this->assertTrue($this->object->max1025Text($this->generateString(1)));
			$this->assertTrue($this->object->max1025Text($this->generateString(1025)));

			$this->assertFalse($this->object->max1025Text($this->generateString(1026)));
			$this->assertFalse($this->object->max1025Text($this->generateString(0)));
    }

    public function testMax140Text()
    {
    	$this->assertTrue($this->object->max140Text($this->generateString(1)));
    	$this->assertTrue($this->object->max140Text($this->generateString(140)));

    	$this->assertFalse($this->object->max140Text($this->generateString(0)));
    	$this->assertFalse($this->object->max140Text($this->generateString(141)));
    }

    public function testMax15NumericText()
    {
			$this->assertTrue($this->object->max15NumericText("1"));
			$this->assertTrue($this->object->max15NumericText("012345678901234"));

			$this->assertFalse($this->object->max15NumericText(""));
			$this->assertFalse($this->object->max15NumericText("0123456789012345"));
			$this->assertFalse($this->object->max15NumericText("a"));
			$this->assertFalse($this->object->max15NumericText("1a"));
			$this->assertFalse($this->object->max15NumericText("a1"));
    }

    public function testMax35Text()
    {
			$this->assertTrue($this->object->max35Text($this->generateString(1)));
			$this->assertTrue($this->object->max35Text($this->generateString(35)));

			$this->assertFalse($this->object->max35Text($this->generateString(0)));
			$this->assertFalse($this->object->max35Text($this->generateString(36)));
    }

    public function testMax70Text()
    {
			$this->assertTrue($this->object->max70Text($this->generateString(1)));
			$this->assertTrue($this->object->max70Text($this->generateString(70)));

			$this->assertFalse($this->object->max70Text($this->generateString(0)));
			$this->assertFalse($this->object->max70Text($this->generateString(71)));
    }

    public function testRestrictedIdentificationSEPA1()
    {
    	$this->assertTrue($this->object->restrictedIdentificationSEPA1("Aa09+?/-:().,' "));
    	$this->assertTrue($this->object->restrictedIdentificationSEPA1($this->generateString(1)));
    	$this->assertTrue($this->object->restrictedIdentificationSEPA1($this->generateString(35)));

    	$this->assertFalse($this->object->restrictedIdentificationSEPA1("%&"));
    	$this->assertFalse($this->object->restrictedIdentificationSEPA1($this->generateString(0)));
    	$this->assertFalse($this->object->restrictedIdentificationSEPA1($this->generateString(36)));
    }

    public function testRestrictedIdentificationSEPA2()
    {
    	$this->assertTrue($this->object->restrictedIdentificationSEPA2("Aa09+?/-:().,'"));
    	$this->assertTrue($this->object->restrictedIdentificationSEPA2($this->generateString(1)));
    	$this->assertTrue($this->object->restrictedIdentificationSEPA2($this->generateString(35)));

    	$this->assertFalse($this->object->restrictedIdentificationSEPA2("A "));
    	$this->assertFalse($this->object->restrictedIdentificationSEPA2("%&"));
    	$this->assertFalse($this->object->restrictedIdentificationSEPA2($this->generateString(0)));
    	$this->assertFalse($this->object->restrictedIdentificationSEPA2($this->generateString(36)));
    }

    public function testRestrictedPersonIdentifierSEPA()
    {
    	$this->assertTrue($this->object->restrictedPersonIdentifierSEPA("DE00ZZZ00099999999"));
    }

    public function testChargeBearerTypeSEPACode()
    {
			$this->assertTrue($this->object->chargeBearerTypeSEPACode("SLEV"));
			$this->assertTrue($this->object->chargeBearerTypeSEPACode("SCOR"));

			$this->assertFalse($this->object->chargeBearerTypeSEPACode(""));
			$this->assertFalse($this->object->chargeBearerTypeSEPACode("slev"));
    }

    public function testSequenceType1Code()
    {
    	$this->assertTrue($this->object->sequenceType1Code("FRST"));
    	$this->assertTrue($this->object->sequenceType1Code("RCUR"));
    	$this->assertTrue($this->object->sequenceType1Code("FNAL"));
    	$this->assertTrue($this->object->sequenceType1Code("OOFF"));

    	$this->assertFalse($this->object->sequenceType1Code(""));
    	$this->assertFalse($this->object->sequenceType1Code("frst"));
    }

    public function testExternalLocalInstrument1Code()
    {
    	$this->assertTrue($this->object->externalLocalInstrument1Code("CORE"));

    	$this->assertFalse($this->object->externalLocalInstrument1Code("core"));
    	$this->assertFalse($this->object->externalLocalInstrument1Code(""));
    }

    public function testTransactionGroupStatus1CodeSEPA()
    {
    	$this->assertTrue($this->object->transactionGroupStatus1CodeSEPA("RJCT"));

    	$this->assertFalse($this->object->transactionGroupStatus1CodeSEPA(""));
    	$this->assertFalse($this->object->transactionGroupStatus1CodeSEPA("rjct"));
    }

    public function testIsoDateTime()
    {
    	$this->assertTrue($this->object->isoDateTime(date('c')));
    	$this->assertTrue($this->object->isoDateTime("2010-11-21T09:30:47.000Z"));
    	$this->assertTrue($this->object->isoDateTime("2010-11-21T09:30:47Z"));

    	$this->assertFalse($this->object->isoDateTime("2010-11-21T09:30:47.Z"));
    }

    public function testIsoDate()
    {
    	$this->assertTrue($this->object->isoDate(date('Y-m-d')));
    	$this->assertTrue($this->object->isoDate("2010-11-21"));

    	$this->assertFalse($this->object->isoDate("20101121"));
    }

   	public function testAmountSEPA()
   	{
   		$this->assertTrue($this->object->amountSEPA("1.00"));
   		$this->assertTrue($this->object->amountSEPA("1.99"));
   		$this->assertTrue($this->object->amountSEPA("11.00"));

   		$this->assertFalse($this->object->amountSEPA("1,00"));
   		$this->assertFalse($this->object->amountSEPA("1"));
   		$this->assertFalse($this->object->amountSEPA("1.0000"));
   		$this->assertFalse($this->object->amountSEPA("1.0"));

   	}

    /*
     * Helper function
     */
    private function generateString($length)
    {
    	return substr(str_repeat("0123456789abcdefghijklmnopqrstuvwxyz", ceil($length/30)), 0, $length);
    }
}
?>
